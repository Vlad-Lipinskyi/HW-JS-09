{"mappings":"ACeA,SAAS,IACP,IAAM,EAAY,SAAS,cAAc,CAAC,aACpC,EAAW,EAAU,KAAK,CAAC,IAAI,GAErC,GAAI,AAAa,KAAb,EAAiB,OAErB,IAAM,EAAQ,IACd,EAAM,IAAI,CAAC,CAAE,KAAM,EAAU,UAAW,CAAA,CAAM,GAG9C,aAAa,OAAO,CAAC,QAAS,KAAK,SAAS,CAAC,IAE7C,EAAU,KAAK,CAAG,GAClB,GACF,CAGA,SAAS,IACP,IAAM,EAAQ,IACR,EAAW,SAAS,cAAc,CAAC,WACzC,CAAA,EAAS,SAAS,CAAG,GAErB,EAAM,OAAO,CAAC,CAAC,EAAM,KACjB,IAAM,EAAK,SAAS,aAAa,CAAC,MAG5B,EAAW,SAAS,aAAa,CAAC,QACxC,CAAA,EAAS,IAAI,CAAG,WAChB,EAAS,OAAO,CAAG,EAAK,SAAS,CACjC,EAAS,OAAO,CAAG,WACf,AA0BV,CAAA,SAA8B,CAAK,EACjC,IAAM,EAAQ,GACd,CAAA,CAAK,CAAC,EAAM,CAAC,SAAS,CAAG,CAAC,CAAK,CAAC,EAAM,CAAC,SAAS,CAGhD,aAAa,OAAO,CAAC,QAAS,KAAK,SAAS,CAAC,IAC7C,GACF,CAAA,EAjC+B,EACzB,EAGA,IAAM,EAAY,SAAS,aAAa,CAAC,SACzC,CAAA,EAAU,WAAW,CAAG,WACxB,EAAU,SAAS,CAAC,GAAG,CAAC,cACxB,EAAU,OAAO,CAAG,WAChB,AA4BV,CAAA,SAAoB,CAAK,EACvB,IAAM,EAAQ,IACd,EAAM,MAAM,CAAC,EAAO,GAGpB,aAAa,OAAO,CAAC,QAAS,KAAK,SAAS,CAAC,IAC7C,GACF,CAAA,EAnCqB,EACf,EAEA,EAAG,WAAW,CAAC,GACf,EAAG,WAAW,CAAC,SAAS,cAAc,CAAC,EAAK,IAAI,GAChD,EAAG,WAAW,CAAC,GAEf,EAAS,WAAW,CAAC,EACzB,EACF,CAGA,SAAS,IACP,IAAM,EAAQ,aAAa,OAAO,CAAC,SACnC,OAAO,EAAQ,KAAK,KAAK,CAAC,GAAS,EAAE,AACvC,CAqCA,SAAS,EAAkB,CAAK,EAC9B,EAAM,cAAc,GAEpB,IAAM,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAAC,IAAI,GACzD,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAAC,IAAI,GAE/D,GAAI,GAAY,EAAU,CACxB,IAAM,EAAQ,AAblB,WACE,IAAM,EAAQ,aAAa,OAAO,CAAC,SACnC,OAAO,EAAQ,KAAK,KAAK,CAAC,GAAS,EAAE,AACvC,IAayB,EAAM,IAAI,CAAC,AAAA,GAAQ,EAAK,QAAQ,GAAK,GAGxD,MAAM,yBAA2B,EAAW,iBAI5C,EAAM,IAAI,CADM,CAAE,SAAA,EAAU,SAAA,CAAS,GAIrC,aAAa,OAAO,CAAC,QAAS,KAAK,SAAS,CAAC,IAG7C,aAAa,OAAO,CAAC,mBAAoB,GAEzC,MAAM,YAAc,EAAW,KAG/B,SAAS,cAAc,CAAC,YAAY,KAAK,CAAG,GAC5C,SAAS,cAAc,CAAC,YAAY,KAAK,CAAG,GAEhD,MACE,MAAM,uCAEV,CA1IA,OAAO,MAAM,CAAG,WACd,IACA,AAwFF,WACE,IAAM,EAAY,aAAa,OAAO,CAAC,oBACnC,GACF,MAAM,YAAc,EAAY,IAEpC,IAzFE,AADmB,SAAS,cAAc,CAAC,cAChC,gBAAgB,CAAC,QAAS,GAIrC,AADkB,SAAS,cAAc,CAAC,aAChC,gBAAgB,CAAC,SAAU,EACvC,EAkIA,MAAM,EAAO,SAAS,cAAc,CAAC,iBAC/B,EAAoB,SAAS,cAAc,CAAC,iBAC5C,EAAmB,SAAS,cAAc,CAAC,gBAC3C,EAAe,SAAS,cAAc,CAAC,iBAQ7C,SAAS,IAEP,OAAO,AADW,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,eACnB,EAAE,AACnC,CAGA,SAAS,IACP,IAAM,EAAY,GAClB,CAAA,EAAa,SAAS,CAAG,GACzB,EAAU,OAAO,CAAC,CAAC,EAAU,KAC3B,IAAM,EAAK,SAAS,aAAa,CAAC,KAClC,CAAA,EAAG,SAAS,CAAG;AACJ,eAAA,EAAE,EAAS,GAAG,CAAC,kBAAkB,EAAE,EAAS,IAAI,CAAC;AAC1B,sCAAA,EAAE,EAAM;AAAqB,IAC/D,CAAC,CACD,EAAa,WAAW,CAAC,EAC3B,EACF,CA8BA,EAAK,gBAAgB,CAAC,SA3BtB,SAAqB,CAAK,EACxB,EAAM,cAAc,GAEpB,IAAM,EAAO,EAAkB,KAAK,CAC9B,EAAM,EAAiB,KAAK,CAElC,GAAI,GAAQ,EAAK,CACf,IAAM,EAAY,IAClB,EAAU,IAAI,CAAC,CAAE,KAAA,EAAM,IAAA,CAAI,GAhC7B,aAAa,OAAO,CAAC,YAAa,KAAK,SAAS,CAiChC,IAEd,EAAkB,KAAK,CAAG,GAC1B,EAAiB,KAAK,CAAG,GAEzB,GACF,CACF,GAcA","sources":["<anon>","src/app.js"],"sourcesContent":["// Завантаження задач з localStorage при завантаженні сторінки\nwindow.onload = function() {\n    loadTasks();\n    handleLogin();\n    // Прив'язуємо обробник події для кнопки додавання задачі\n    const addTaskBtn = document.getElementById(\"addTaskBtn\");\n    addTaskBtn.addEventListener(\"click\", addTask);\n    // Прив'язуємо обробник події для форми логіну\n    const loginForm = document.getElementById(\"loginForm\");\n    loginForm.addEventListener(\"submit\", handleLoginSubmit);\n};\n// Додавання нової задачі\nfunction addTask() {\n    const taskInput = document.getElementById(\"taskInput\");\n    const taskText = taskInput.value.trim();\n    if (taskText === \"\") return; // Якщо поле порожнє, нічого не робимо\n    const tasks = getTasksFromLocalStorage();\n    tasks.push({\n        text: taskText,\n        completed: false\n    });\n    // Зберігаємо список задач в localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    taskInput.value = \"\"; // Очищаємо поле вводу\n    loadTasks(); // Перезавантажуємо список задач\n}\n// Завантаження задач з localStorage і відображення їх\nfunction loadTasks() {\n    const tasks = getTasksFromLocalStorage();\n    const taskList = document.getElementById(\"taskList\");\n    taskList.innerHTML = \"\"; // Очищаємо список\n    tasks.forEach((task, index)=>{\n        const li = document.createElement(\"li\");\n        // Створюємо checkbox для позначення задачі як виконаної\n        const checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.checked = task.completed;\n        checkbox.onclick = function() {\n            toggleTaskCompletion(index);\n        };\n        // Кнопка для видалення задачі\n        const deleteBtn = document.createElement(\"button\");\n        deleteBtn.textContent = \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438\";\n        deleteBtn.classList.add(\"delete-btn\");\n        deleteBtn.onclick = function() {\n            deleteTask(index);\n        };\n        li.appendChild(checkbox);\n        li.appendChild(document.createTextNode(task.text));\n        li.appendChild(deleteBtn);\n        taskList.appendChild(li);\n    });\n}\n// Отримуємо задачі з localStorage\nfunction getTasksFromLocalStorage() {\n    const tasks = localStorage.getItem(\"tasks\");\n    return tasks ? JSON.parse(tasks) : [];\n}\n// Зміна статусу виконання задачі\nfunction toggleTaskCompletion(index) {\n    const tasks = getTasksFromLocalStorage();\n    tasks[index].completed = !tasks[index].completed;\n    // Оновлюємо tasks в localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    loadTasks(); // Перезавантажуємо список задач\n}\n// Видалення задачі\nfunction deleteTask(index) {\n    const tasks = getTasksFromLocalStorage();\n    tasks.splice(index, 1); // Видаляємо задачу за індексом\n    // Оновлюємо tasks в localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    loadTasks(); // Перезавантажуємо список задач\n}\n// Обробка логіну\nfunction handleLogin() {\n    const savedUser = localStorage.getItem(\"loggedInUsername\");\n    if (savedUser) alert(\"\\u0412\\u0456\\u0442\\u0430\\u0454\\u043C\\u043E, \" + savedUser + \"!\");\n}\n// Отримуємо список користувачів з localStorage\nfunction getUsersFromLocalStorage() {\n    const users = localStorage.getItem(\"users\");\n    return users ? JSON.parse(users) : [];\n}\n// Обробка логіну при сабміті форми\nfunction handleLoginSubmit(event) {\n    event.preventDefault(); // Запобігаємо перезавантаженню сторінки\n    const username = document.getElementById(\"username\").value.trim();\n    const password = document.getElementById(\"password\").value.trim();\n    if (username && password) {\n        const users = getUsersFromLocalStorage();\n        // Перевіряємо, чи вже існує користувач з таким логіном\n        const existingUser = users.find((user)=>user.username === username);\n        if (existingUser) alert(\"\\u041A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447 \\u0437 \\u043B\\u043E\\u0433\\u0456\\u043D\\u043E\\u043C '\" + username + \"' \\u0432\\u0436\\u0435 \\u0456\\u0441\\u043D\\u0443\\u0454.\");\n        else {\n            // Створюємо нового користувача\n            const newUser = {\n                username,\n                password\n            };\n            users.push(newUser);\n            // Зберігаємо список користувачів в localStorage\n            localStorage.setItem(\"users\", JSON.stringify(users));\n            // Зберігаємо ім'я користувача як залогінене\n            localStorage.setItem(\"loggedInUsername\", username);\n            alert(\"\\u0412\\u0456\\u0442\\u0430\\u0454\\u043C\\u043E, \" + username + \"!\");\n            // Очищаємо поля вводу\n            document.getElementById(\"username\").value = \"\";\n            document.getElementById(\"password\").value = \"\";\n        }\n    } else alert(\"\\u0411\\u0443\\u0434\\u044C \\u043B\\u0430\\u0441\\u043A\\u0430, \\u0432\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C \\u043B\\u043E\\u0433\\u0456\\u043D \\u0442\\u0430 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C.\");\n}\n// Отримуємо елементи сторінки\nconst form = document.getElementById(\"bookmark-form\");\nconst bookmarkNameInput = document.getElementById(\"bookmark-name\");\nconst bookmarkUrlInput = document.getElementById(\"bookmark-url\");\nconst bookmarkList = document.getElementById(\"bookmark-list\");\n// Функція для збереження закладок в localStorage\nfunction saveBookmarks(bookmarks) {\n    localStorage.setItem(\"bookmarks\", JSON.stringify(bookmarks));\n}\n// Функція для завантаження закладок з localStorage\nfunction loadBookmarks() {\n    const bookmarks = JSON.parse(localStorage.getItem(\"bookmarks\"));\n    return bookmarks ? bookmarks : [];\n}\n// Функція для оновлення списку закладок на сторінці\nfunction renderBookmarks() {\n    const bookmarks = loadBookmarks();\n    bookmarkList.innerHTML = \"\";\n    bookmarks.forEach((bookmark, index)=>{\n        const li = document.createElement(\"li\");\n        li.innerHTML = `\n      <a href=\"${bookmark.url}\" target=\"_blank\">${bookmark.name}</a>\n      <button onclick=\"deleteBookmark(${index})\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n    `;\n        bookmarkList.appendChild(li);\n    });\n}\n// Функція для додавання нової закладки\nfunction addBookmark(event) {\n    event.preventDefault();\n    const name = bookmarkNameInput.value;\n    const url = bookmarkUrlInput.value;\n    if (name && url) {\n        const bookmarks = loadBookmarks();\n        bookmarks.push({\n            name,\n            url\n        });\n        saveBookmarks(bookmarks);\n        bookmarkNameInput.value = \"\";\n        bookmarkUrlInput.value = \"\";\n        renderBookmarks();\n    }\n}\n// Функція для видалення закладки\nfunction deleteBookmark(index) {\n    const bookmarks = loadBookmarks();\n    bookmarks.splice(index, 1);\n    saveBookmarks(bookmarks);\n    renderBookmarks();\n}\n// Слухач події для форми\nform.addEventListener(\"submit\", addBookmark);\n// Завантажуємо список закладок при завантаженні сторінки\nrenderBookmarks();\n\n//# sourceMappingURL=index.e7aadcd8.js.map\n","// Завантаження задач з localStorage при завантаженні сторінки\r\nwindow.onload = function() {\r\n  loadTasks();\r\n  handleLogin();\r\n\r\n  // Прив'язуємо обробник події для кнопки додавання задачі\r\n  const addTaskBtn = document.getElementById(\"addTaskBtn\");\r\n  addTaskBtn.addEventListener(\"click\", addTask);\r\n  \r\n  // Прив'язуємо обробник події для форми логіну\r\n  const loginForm = document.getElementById(\"loginForm\");\r\n  loginForm.addEventListener(\"submit\", handleLoginSubmit);\r\n};\r\n\r\n// Додавання нової задачі\r\nfunction addTask() {\r\n  const taskInput = document.getElementById(\"taskInput\");\r\n  const taskText = taskInput.value.trim();\r\n\r\n  if (taskText === \"\") return;  // Якщо поле порожнє, нічого не робимо\r\n\r\n  const tasks = getTasksFromLocalStorage();\r\n  tasks.push({ text: taskText, completed: false });\r\n\r\n  // Зберігаємо список задач в localStorage\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n\r\n  taskInput.value = \"\"; // Очищаємо поле вводу\r\n  loadTasks();  // Перезавантажуємо список задач\r\n}\r\n\r\n// Завантаження задач з localStorage і відображення їх\r\nfunction loadTasks() {\r\n  const tasks = getTasksFromLocalStorage();\r\n  const taskList = document.getElementById(\"taskList\");\r\n  taskList.innerHTML = \"\";  // Очищаємо список\r\n\r\n  tasks.forEach((task, index) => {\r\n      const li = document.createElement(\"li\");\r\n\r\n      // Створюємо checkbox для позначення задачі як виконаної\r\n      const checkbox = document.createElement(\"input\");\r\n      checkbox.type = \"checkbox\";\r\n      checkbox.checked = task.completed;\r\n      checkbox.onclick = function() {\r\n          toggleTaskCompletion(index);\r\n      };\r\n\r\n      // Кнопка для видалення задачі\r\n      const deleteBtn = document.createElement(\"button\");\r\n      deleteBtn.textContent = \"Видалити\";\r\n      deleteBtn.classList.add(\"delete-btn\");\r\n      deleteBtn.onclick = function() {\r\n          deleteTask(index);\r\n      };\r\n\r\n      li.appendChild(checkbox);\r\n      li.appendChild(document.createTextNode(task.text));\r\n      li.appendChild(deleteBtn);\r\n\r\n      taskList.appendChild(li);\r\n  });\r\n}\r\n\r\n// Отримуємо задачі з localStorage\r\nfunction getTasksFromLocalStorage() {\r\n  const tasks = localStorage.getItem(\"tasks\");\r\n  return tasks ? JSON.parse(tasks) : [];\r\n}\r\n\r\n// Зміна статусу виконання задачі\r\nfunction toggleTaskCompletion(index) {\r\n  const tasks = getTasksFromLocalStorage();\r\n  tasks[index].completed = !tasks[index].completed;\r\n\r\n  // Оновлюємо tasks в localStorage\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  loadTasks();  // Перезавантажуємо список задач\r\n}\r\n\r\n// Видалення задачі\r\nfunction deleteTask(index) {\r\n  const tasks = getTasksFromLocalStorage();\r\n  tasks.splice(index, 1); // Видаляємо задачу за індексом\r\n\r\n  // Оновлюємо tasks в localStorage\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  loadTasks();  // Перезавантажуємо список задач\r\n}\r\n\r\n// Обробка логіну\r\nfunction handleLogin() {\r\n  const savedUser = localStorage.getItem(\"loggedInUsername\");\r\n  if (savedUser) {\r\n    alert(\"Вітаємо, \" + savedUser + \"!\");\r\n  }\r\n}\r\n\r\n// Отримуємо список користувачів з localStorage\r\nfunction getUsersFromLocalStorage() {\r\n  const users = localStorage.getItem(\"users\");\r\n  return users ? JSON.parse(users) : [];\r\n}\r\n\r\n// Обробка логіну при сабміті форми\r\nfunction handleLoginSubmit(event) {\r\n  event.preventDefault();  // Запобігаємо перезавантаженню сторінки\r\n\r\n  const username = document.getElementById(\"username\").value.trim();\r\n  const password = document.getElementById(\"password\").value.trim();\r\n\r\n  if (username && password) {\r\n    const users = getUsersFromLocalStorage();\r\n\r\n    // Перевіряємо, чи вже існує користувач з таким логіном\r\n    const existingUser = users.find(user => user.username === username);\r\n\r\n    if (existingUser) {\r\n      alert(\"Користувач з логіном '\" + username + \"' вже існує.\");\r\n    } else {\r\n      // Створюємо нового користувача\r\n      const newUser = { username, password };\r\n      users.push(newUser);\r\n\r\n      // Зберігаємо список користувачів в localStorage\r\n      localStorage.setItem(\"users\", JSON.stringify(users));\r\n\r\n      // Зберігаємо ім'я користувача як залогінене\r\n      localStorage.setItem(\"loggedInUsername\", username);\r\n\r\n      alert(\"Вітаємо, \" + username + \"!\");\r\n\r\n      // Очищаємо поля вводу\r\n      document.getElementById(\"username\").value = \"\";\r\n      document.getElementById(\"password\").value = \"\";\r\n    }\r\n  } else {\r\n    alert(\"Будь ласка, введіть логін та пароль.\");\r\n  }\r\n}\r\n\r\n// Отримуємо елементи сторінки\r\nconst form = document.getElementById(\"bookmark-form\");\r\nconst bookmarkNameInput = document.getElementById(\"bookmark-name\");\r\nconst bookmarkUrlInput = document.getElementById(\"bookmark-url\");\r\nconst bookmarkList = document.getElementById(\"bookmark-list\");\r\n\r\n// Функція для збереження закладок в localStorage\r\nfunction saveBookmarks(bookmarks) {\r\n  localStorage.setItem(\"bookmarks\", JSON.stringify(bookmarks));\r\n}\r\n\r\n// Функція для завантаження закладок з localStorage\r\nfunction loadBookmarks() {\r\n  const bookmarks = JSON.parse(localStorage.getItem(\"bookmarks\"));\r\n  return bookmarks ? bookmarks : [];\r\n}\r\n\r\n// Функція для оновлення списку закладок на сторінці\r\nfunction renderBookmarks() {\r\n  const bookmarks = loadBookmarks();\r\n  bookmarkList.innerHTML = \"\";\r\n  bookmarks.forEach((bookmark, index) => {\r\n    const li = document.createElement(\"li\");\r\n    li.innerHTML = `\r\n      <a href=\"${bookmark.url}\" target=\"_blank\">${bookmark.name}</a>\r\n      <button onclick=\"deleteBookmark(${index})\">Видалити</button>\r\n    `;\r\n    bookmarkList.appendChild(li);\r\n  });\r\n}\r\n\r\n// Функція для додавання нової закладки\r\nfunction addBookmark(event) {\r\n  event.preventDefault();\r\n  \r\n  const name = bookmarkNameInput.value;\r\n  const url = bookmarkUrlInput.value;\r\n  \r\n  if (name && url) {\r\n    const bookmarks = loadBookmarks();\r\n    bookmarks.push({ name, url });\r\n    saveBookmarks(bookmarks);\r\n    \r\n    bookmarkNameInput.value = \"\";\r\n    bookmarkUrlInput.value = \"\";\r\n    \r\n    renderBookmarks();\r\n  }\r\n}\r\n\r\n// Функція для видалення закладки\r\nfunction deleteBookmark(index) {\r\n  const bookmarks = loadBookmarks();\r\n  bookmarks.splice(index, 1);\r\n  saveBookmarks(bookmarks);\r\n  renderBookmarks();\r\n}\r\n\r\n// Слухач події для форми\r\nform.addEventListener(\"submit\", addBookmark);\r\n\r\n// Завантажуємо список закладок при завантаженні сторінки\r\nrenderBookmarks();\r\n\r\n\r\n"],"names":["addTask","taskInput","document","getElementById","taskText","value","trim","tasks","getTasksFromLocalStorage","push","text","completed","localStorage","setItem","JSON","stringify","loadTasks","taskList","innerHTML","forEach","task","index","li","createElement","checkbox","type","checked","onclick","toggleTaskCompletion","deleteBtn","textContent","classList","add","deleteTask","splice","appendChild","createTextNode","getItem","parse","handleLoginSubmit","event","preventDefault","username","password","users","getUsersFromLocalStorage","find","user","alert","window","onload","handleLogin","savedUser","addTaskBtn","addEventListener","loginForm","form","bookmarkNameInput","bookmarkUrlInput","bookmarkList","loadBookmarks","bookmarks","renderBookmarks","bookmark","url","name"],"version":3,"file":"index.e7aadcd8.js.map"}